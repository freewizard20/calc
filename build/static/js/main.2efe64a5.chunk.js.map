{"version":3,"sources":["logo.svg","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","useState","priceList","setPriceList","amountList","setAmountList","price","setPrice","amount","setAmount","average","setAverage","accumulated","setAccumulated","cutlossPercentage","setCutlossPercentage","cutloss","setCutloss","target","setTarget","cutlossAmount","setCutlossAmount","tax","setTax","taxrate","revenue","setRevenue","calcState","setCalcState","useEffect","totalamount","accum","i","length","cutlossprice","Number","toFixed","BTCamount","cutlossprice_d","stateHandler","e","map","index","onClick","filter","v","deleteHandler","type","onChange","value","placeholder","isNaN","concat","handlePercentage","style","marginTop","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2efe64a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\";\n\nfunction Main() {\n  const [priceList, setPriceList] = useState([]);\n  const [amountList, setAmountList] = useState([]);\n  const [price, setPrice] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [average, setAverage] = useState(0);\n  const [accumulated, setAccumulated] = useState(0);\n  const [cutlossPercentage, setCutlossPercentage] = useState(0);\n  const [cutloss, setCutloss] = useState(0);\n  const [target, setTarget] = useState(\"\");\n  const [cutlossAmount, setCutlossAmount] = useState(0);\n  const [tax, setTax] = useState(0);\n  const [status, setStatus] = useState(0);\n  const [taxrate, setTaxrate] = useState(0.0015);\n  const [revenue, setRevenue] = useState(0);\n  const [calcState, setCalcState] = useState(1);\n\n  useEffect(() => {\n    if (calcState === 0) {\n      let totalamount = 0;\n      let accum = 0;\n      for (let i = 0; i < priceList.length; i++) {\n        accum += priceList[i].price * amountList[i].amount;\n\n        totalamount += amountList[i].amount;\n      }\n      setAccumulated(accum);\n      let cutlossprice =\n        accum / totalamount -\n        (accum * Number(cutlossPercentage) * 0.01 - tax) / totalamount;\n      if (totalamount !== 0) {\n        setAverage(accum / totalamount);\n        setCutloss(cutlossprice.toFixed(2));\n        setCutlossAmount(\n          (accum / totalamount - cutlossprice) * totalamount +\n            accum * 2 * taxrate\n        );\n        setRevenue(\n          (target - accum / totalamount) * totalamount - accum * 2 * taxrate\n        );\n      } else {\n        setAverage(0);\n        setCutloss(0);\n        setCutlossAmount(0);\n        setRevenue(0);\n      }\n      setTax(accum * 2 * taxrate);\n    } else if (calcState === 1) {\n      let totalamount = 0;\n      let accum = 0;\n      for (let i = 0; i < priceList.length; i++) {\n        let BTCamount = amountList[i].amount / priceList[i].price;\n        accum += amountList[i].amount;\n        totalamount += BTCamount;\n      }\n\n      setAccumulated(totalamount);\n      setAverage(accum / totalamount);\n      setTax(totalamount * taxrate);\n      let BTCtarget = accum / target;\n      setRevenue(totalamount - BTCtarget);\n      let cutlossprice_d =\n        accum /\n        ((1 + cutlossPercentage * 0.01) * totalamount - totalamount * taxrate);\n      setCutloss(cutlossprice_d);\n      setCutlossAmount(\n        (accum / cutlossprice_d - totalamount + totalamount * taxrate).toFixed(\n          5\n        )\n      );\n    } else if (calcState === 2) {\n      let totalamount = 0;\n      let accum = 0;\n      for (let i = 0; i < priceList.length; i++) {\n        let BTCamount = amountList[i].amount / priceList[i].price;\n        accum += amountList[i].amount;\n        totalamount += BTCamount;\n      }\n      setAccumulated(totalamount);\n      setAverage(accum / totalamount);\n      setTax(totalamount * taxrate);\n      let BTCtarget = accum / target;\n      setRevenue(BTCtarget - totalamount);\n      let cutlossprice_d =\n        accum /\n        ((1 - cutlossPercentage * 0.01) * totalamount + totalamount * taxrate);\n      setCutloss(cutlossprice_d);\n      setCutlossAmount(\n        (-accum / cutlossprice_d + totalamount - totalamount * taxrate).toFixed(\n          5\n        )\n      );\n    }\n  }, [priceList, cutlossPercentage, target, calcState]);\n\n  const addHandler = () => {\n    if (isNaN(Number(price)) || isNaN(Number(amount))) {\n      return;\n    }\n    setPriceList(priceList.concat({ price: Number(price) }));\n    setAmountList(amountList.concat({ amount: Number(amount) }));\n    setPrice(\"\");\n    setAmount(\"\");\n  };\n\n  const deleteHandler = (index) => {\n    setPriceList(\n      priceList.filter((v, i) => {\n        return i != index;\n      })\n    );\n    setAmountList(\n      amountList.filter((v, i) => {\n        return i != index;\n      })\n    );\n  };\n\n  const handlePercentage = (e) => {\n    setCutlossPercentage(Number(e.target.value));\n  };\n\n  const resetHandler = () => {\n    setTarget(\"\");\n    setPriceList([]);\n    setAmountList([]);\n    setCutlossPercentage(0);\n  };\n\n  const stateHandler = (e) => {\n    setCalcState(e);\n  };\n\n  return (\n    <div>\n      <h1>시나리오 플래너</h1>\n      <ul>\n        {priceList.map((price, index) => {\n          return (\n            <>\n              <li>\n                {price.price} {amountList[index].amount}\n                <button\n                  onClick={() => {\n                    deleteHandler(index);\n                  }}\n                >\n                  Del\n                </button>\n              </li>\n            </>\n          );\n        })}\n      </ul>\n      <input\n        type=\"text\"\n        onChange={(e) => {\n          setPrice(e.target.value);\n        }}\n        value={price}\n        placeholder=\"가격\"\n      />\n      <input\n        type=\"text\"\n        onChange={(e) => {\n          setAmount(e.target.value);\n        }}\n        value={amount}\n        placeholder=\"수량\"\n      />\n      <button onClick={() => addHandler()}>Add</button>\n      <h3>총 매입금액 : {accumulated}</h3>\n      <h3>평균 매입단가 : {average}</h3>\n      <h3>\n        손절비중(%) :{\" \"}\n        <input\n          type=\"text\"\n          onChange={(e) => {\n            handlePercentage(e);\n          }}\n        />\n      </h3>\n      <h3>\n        {cutlossPercentage}% 손절 단가 : {cutloss}\n      </h3>\n      <h3>수수료 : {tax}</h3>\n      <h3>손실 총액 : {cutlossAmount}</h3>\n      <h3>\n        목표가 :{\" \"}\n        <input\n          type=\"text\"\n          onChange={(e) => {\n            setTarget(e.target.value);\n          }}\n          value={target}\n        />\n      </h3>\n      <h3>수익 금액 : {revenue}</h3>\n      <button onClick={resetHandler}>초기화</button>\n      <div style={{ marginTop: \"20px\" }}>\n        <button\n          onClick={() => {\n            stateHandler(0);\n          }}\n        >\n          일반거래\n        </button>\n        <button\n          onClick={() => {\n            stateHandler(1);\n          }}\n        >\n          비트멕스 롱\n        </button>\n        <button\n          onClick={() => {\n            stateHandler(2);\n          }}\n        >\n          비트멕스 숏\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}